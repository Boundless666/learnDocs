"use strict";(self.webpackChunklearn_docs=self.webpackChunklearn_docs||[]).push([[93],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},c=Object.keys(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),l=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(u.Provider,{value:e},t.children)},i={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,c=t.originalType,u=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=l(n),k=a,f=d["".concat(u,".").concat(k)]||d[k]||i[k]||c;return n?r.createElement(f,s(s({ref:e},p),{},{components:n})):r.createElement(f,s({ref:e},p))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:a,s[1]=o;for(var l=2;l<c;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8932:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>i,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const c={},s="\u94fe\u6808",o={unversionedId:"stackAndQueue/linkedStack",id:"stackAndQueue/linkedStack",title:"\u94fe\u6808",description:"linkedStack.c",source:"@site/docs/03-stackAndQueue/02-linkedStack.md",sourceDirName:"03-stackAndQueue",slug:"/stackAndQueue/linkedStack",permalink:"/learnDocs/docs/stackAndQueue/linkedStack",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-stackAndQueue/02-linkedStack.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u987a\u5e8f\u6808",permalink:"/learnDocs/docs/stackAndQueue/seqStack"},next:{title:"\u987a\u5e8f\u961f\u5217",permalink:"/learnDocs/docs/stackAndQueue/seqQueue"}},u={},l=[],p={toc:l};function i(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u94fe\u6808"},"\u94fe\u6808"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"linkedStack.c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\ntypedef char ElemType;\n\ntypedef struct LNode{\n ElemType data;\n struct LNode *next;\n}LNode;\n\ntypedef struct{\n LNode* top;\n}Stack;\n\nvoid InitStack(Stack *stack);\nbool Push(Stack *stack, ElemType e);\nbool Pop(Stack *stack, ElemType *e);\nbool GetTop(Stack *stack, ElemType *e);\nbool StackEmpty(Stack *stack);\nvoid ShowInfo(Stack stack);\nvoid SuccessPrint(bool status, ElemType e);\n\nint main(){\n Stack stack;\n InitStack(&stack);\n Push(&stack, \'D\');\n Push(&stack, \'C\');\n Push(&stack, \'B\');\n Push(&stack, \'A\');\n ShowInfo(stack);\n\n ElemType result;\n bool status;\n status = GetTop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n status = Pop(&stack, &result);\n printf("\u64cd\u4f5c\u72b6\u6001: %d \u8fd4\u56de\u503c: %c \\n", status, result);\n \n return 0;\n}\n\n\nbool StackEmpty(Stack *stack){\n if(stack == NULL){\n  printf("\u8bf7\u5148\u5b8c\u6210\u521d\u59cb\u5316,\u7a0b\u5e8f\u9000\u51fa\\n");  \n  exit(0);\n }\n\n if(stack->top == NULL){\n  return true;\n }\n return false;\n}\n\nvoid InitStack(Stack *stack){\n stack->top = NULL;\n}\n\n\nLNode* createNode(){\n LNode *node = (LNode*)malloc(sizeof(LNode));\n if(node == NULL){\n  printf("\u5185\u5b58\u7533\u8bf7\u5931\u8d25,\u7a0b\u5e8f\u9000\u51fa\\n");\n  exit(0);\n }\n node->next = NULL;\n return node;\n}\n\nbool Push(Stack *stack, ElemType e){\n if(stack == NULL){\n  printf("\u8bf7\u5148\u521d\u59cb\u5316\\n");\n  return false;\n }\n LNode *newElem = createNode();\n newElem->data = e;\n newElem->next = stack->top;\n stack->top = newElem;\n return true; \n}\n\nbool Pop(Stack *stack, ElemType *e){\n if(StackEmpty(stack)){\n  printf("\u7a7a\u6808,\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\u4e86\\t");\n  return false;\n }\n LNode *dumpElem = stack->top;\n *e = dumpElem->data;\n stack->top = dumpElem->next;\n free(dumpElem);\n return true;\n}\n\nbool GetTop(Stack *stack, ElemType *e){\n if(StackEmpty(stack)){\n  printf("\u7a7a\u6808,\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\u4e86\\n");\n  return false;\n }\n *e = stack->top->data;\n return true;\n}\n\nvoid ShowInfo(Stack stack){\n LNode *p = stack.top;\n int order = 1;\n while(p != NULL){\n  printf("\u5f53\u524d\u7b2c %d \u4e2a\u5143\u7d20\u7684\u503c\u4e3a: %c \\n", order++, p->data);\n  p = p->next;\n }\n printf("\\n\\n");\n}\n\nvoid SuccessPrint(bool status, ElemType e){\n if(status){\n  printf("\u5f53\u524d\u5143\u7d20\u4e3a: %c \\n", e);\n }\n else{\n  printf("\u6267\u884c\u64cd\u4f5c\u5931\u8d25!\\n");\n }\n}\n')))}i.isMDXComponent=!0}}]);