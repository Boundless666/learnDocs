"use strict";(self.webpackChunklearn_docs=self.webpackChunklearn_docs||[]).push([[147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),d=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(a.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(t),u=i,f=m["".concat(a,".").concat(u)]||m[u]||c[u]||l;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=m;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<l;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},819:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const l={},o="\u987a\u5e8f\u8868",s={unversionedId:"list/seqList",id:"list/seqList",title:"\u987a\u5e8f\u8868",description:"",source:"@site/docs/02-list/01-seqList.md",sourceDirName:"02-list",slug:"/list/seqList",permalink:"/docs/list/seqList",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-list/01-seqList.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7ebf\u6027\u7ed3\u6784",permalink:"/docs/list/"},next:{title:"\u5355\u94fe\u8868",permalink:"/docs/list/linkedList"}},a={},d=[],p={toc:d};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u987a\u5e8f\u8868"},"\u987a\u5e8f\u8868"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <stdlib.h>\n\n#define LIST_INIT_SIZE 8 //\u7ebf\u6027\u8868\u5b58\u50a8\u7a7a\u95f4\u521d\u59cb\u5206\u914d\u91cf\n#define LIST_INCREMENT_SCALE 2 //\u7ebf\u6027\u8868\u5b58\u50a8\u7a7a\u95f4\u7684\u5206\u914d\u589e\u91cf\u6bd4\u4f8b\n\ntypedef char ElemType; //\u5b9a\u4e49\u6570\u636e\u9879\u7c7b\u578b\n\ntypedef struct{\n ElemType *data;\n int length;\n int listsize;\n}SeqList;\n\n\nvoid InitList(SeqList *l);\nvoid visit(ElemType item);\nvoid ListTraverse(SeqList l, void (*visit)(ElemType) );\nvoid ListInsert(SeqList *l, int order, ElemType e);\nvoid ListDelete(SeqList *l, int order, ElemType *e);\nint compare(ElemType left, ElemType right);\nint LocateElem(SeqList l, ElemType e, int (*compare)(ElemType,ElemType));\nvoid GetElem(SeqList l, int order, ElemType *e);\n\nint main(){\n SeqList l;\n InitList(&l);\n ListInsert(&l, 1, \'A\');\n ListInsert(&l, 2, \'B\');\n ListInsert(&l, 4, \'C\');\n ListInsert(&l, 3, \'C\');\n ListInsert(&l, 4, \'D\');\n ListInsert(&l, 5, \'E\');\n ListTraverse(l, visit);\n \n ElemType result;\n int order = LocateElem(l, \'B\', compare);\n ListDelete(&l, order, &result);\n ListTraverse(l, visit);\n printf("\u5220\u9664\u7684\u4f4d\u5e8f:%d \\t \u7ed3\u679c:%c \\n",order, result);\n \n GetElem(l, order, &result);\n printf("\u83b7\u53d6\u7684\u4f4d\u5e8f:%d \\t \u7ed3\u679c:%c \\n",order, result);\n \n \n return 0;\n}\n\n//\u521d\u59cb\u5316\nvoid InitList(SeqList *l){\n l->data = (ElemType*) malloc(sizeof(ElemType)*LIST_INIT_SIZE);\n l->length = 0;\n l->listsize = LIST_INIT_SIZE;\n}\n\n//\u987a\u5e8f\u8868\u904d\u5386\nvoid ListTraverse(SeqList l, void (*visit)(ElemType) ){\n printf("length = %d \\t listsize = %d \\n \u5217\u8868\u5143\u7d20\u5982\u4e0b:\\n",l.length, l.listsize);\n if(l.length < 1){\n  return;\n }\n for(int i=0; i<l.length; i++){\n  visit(l.data[i]);\n }\n printf("\\n\\n");\n}\n//\u987a\u5e8f\u8868\u904d\u5386\u64cd\u4f5c\nvoid visit(ElemType item){\n printf("--- %c ---\\n",item);\n}\n\n\n/*\n\u63d2\u5165\u64cd\u4f5c\norder:\u5728\u7b2ci\u4e2a\u5143\u7d20\u524d\u9762\u63d2\u5165\n*/\nvoid ListInsert(SeqList *l, int order, ElemType e){\n if(order<1 || (order > l->length+1) ){\n  printf("\u4f4d\u5e8f--%d--\u8d85\u51fa\u8303\u56f4\\n",order);\n  return;\n }\n if(l->length == l->listsize){\n  printf("\u987a\u5e8f\u8868\u5b58\u50a8\u7a7a\u95f4\u5df2\u6ee1\\n");//\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c\u4e00\u4e2a\u6269\u5bb9\u64cd\u4f5c realloc()\n  return;\n }\n \n for(int i=l->length; i>=order; i--){\n  l->data[i] = l->data[i-1];\n }\n l->data[order-1] = e;\n l->length = l->length+1;\n}\n\n/*\n\u5220\u9664\u64cd\u4f5c\norder:\u5220\u9664\u7b2ci\u4e2a\u5143\u7d20\n*/\nvoid ListDelete(SeqList *l, int order, ElemType *e){\n if(order<1 || order > l->length){\n  printf("\u4f4d\u5e8f--%d--\u8d85\u51fa\u8303\u56f4\\n",order);\n  return;\n }\n (*e) = l->data[order - 1];\n for(int i=order-1; i<l->length-1; i++){\n  l->data[i] = l->data[i+1];\n }\n l->length = l->length -1;\n}\n\nvoid GetElem(SeqList l, int order, ElemType *e){\n if(order<1 || order>l.length){\n  printf("\u4f4d\u5e8f--%d--\u8d85\u51fa\u8303\u56f4\\n",order);\n  return;\n }\n (*e) = l.data[order - 1];\n}\n\nint compare(ElemType left, ElemType right){\n return left == right;\n}\nint LocateElem(SeqList l, ElemType e, int (*compare)(ElemType,ElemType)){\n int result = 0;\n for(int i=0; i<l.length; i++){\n  if(compare(l.data[i], e)){\n   result = i+1;\n   break;\n  }\n }\n return result;\n}\n')))}c.isMDXComponent=!0}}]);