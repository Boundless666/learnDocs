"use strict";(self.webpackChunklearn_docs=self.webpackChunklearn_docs||[]).push([[426],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=l(t),m=i,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||s;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=f;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9465:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const s={},a="\u6808\u7684\u5e94\u7528--\u8868\u8fbe\u5f0f\u5904\u7406",o={unversionedId:"stackAndQueue/stack_expression",id:"stackAndQueue/stack_expression",title:"\u6808\u7684\u5e94\u7528--\u8868\u8fbe\u5f0f\u5904\u7406",description:"\u5bf9\u8fd9\u6837\u4e00\u4e2a\u4e2d\u7f00\u8868\u8fbe\u5f0f  2+(5-3)*2  \u600e\u4e48\u5904\u7406ps:\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u5c31\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f",source:"@site/docs/03-stackAndQueue/06-stack_expression.md",sourceDirName:"03-stackAndQueue",slug:"/stackAndQueue/stack_expression",permalink:"/docs/stackAndQueue/stack_expression",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-stackAndQueue/06-stack_expression.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6808\u7684\u5e94\u7528--\u62ec\u53f7\u5339\u914d",permalink:"/docs/stackAndQueue/stack_bracket"}},c={},l=[{value:"\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fd0\u7b97",id:"\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fd0\u7b97",level:5}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6808\u7684\u5e94\u7528--\u8868\u8fbe\u5f0f\u5904\u7406"},"\u6808\u7684\u5e94\u7528--\u8868\u8fbe\u5f0f\u5904\u7406"),(0,i.kt)("p",null,"\u5bf9\u8fd9\u6837\u4e00\u4e2a\u4e2d\u7f00\u8868\u8fbe\u5f0f  ",(0,i.kt)("strong",{parentName:"p"},"2+(5-3)*2"),"  \u600e\u4e48\u5904\u7406",(0,i.kt)("em",{parentName:"p"},"ps:\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u5c31\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f")),(0,i.kt)("p",null,"\u6838\u5fc3\u6709\u4e24\u70b9"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f \u8f6c\u4e3a \u540e\u7f00\u8868\u8fbe\u5f0f"),(0,i.kt)("li",{parentName:"ol"},"\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fdb\u884c\u8fd0\u7b97")),(0,i.kt)("p",null,"\u4e2d\u7f00\u8f6c\u540e\u7f00"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"bool isOperationNum(char c){\n if(isdigit(c) != 0){//include <ctype.h>\n  return true;\n }\n return false;\n}\n\nbool isOperator(char c){\n if(c == '+' || c=='-' || c=='*' || c=='/'){\n  return true;\n }\n return false;\n}\n\nint getOperatorLevel(char c){\n if(c=='+' || c=='-'){\n  return 1;\n } \n if(c=='*' || c=='/'){\n  return 2;\n }\n return -1;\n}\n\nbool compare(char left, char right){\n if(getOperatorLevel(left) >= getOperatorLevel(right)){\n  return true;\n }\n return false;\n}\n\n/*\n\u4e2d\u7f00\u8868\u8fbe\u5f0f \u8f6c \u540e\u7f00\u8868\u8fbe\u5f0f\n1.\u9047\u5230\u64cd\u4f5c\u6570  \u76f4\u63a5\u62fc\u63a5\u5728\u540e\u7f00\u8868\u8fbe\u5f0f\u540e\u9762\n2.\u9047\u5230\u754c\u9650\u7b26 ( )   \u9047\u5230 ( \u5c31\u653e\u5165\u6808\u4e2d,\u9047\u5230 ) \u5219\u4f9d\u6b21\u53d6\u51fa\u6808\u4e2d\u7684\u5143\u7d20,\u76f4\u5230\u9047\u5230\u5143\u7d20\u4e3a ( \u4e3a\u6b62, ( \u4e0d\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\n3.\u9047\u5230\u8fd0\u7b97\u7b26 + - * / \u4f9d\u6b21\u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u5143\u7d20 \u76f4\u5230\u9047\u5230\u5143\u7d20\u4e3a ( \u6216\u8005\u6808\u7a7a\u4e3a\u6b62, ( \u4e0d\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f   \u6700\u540e\u518d\u5c06\u6b64\u8fd0\u7b97\u7b26\u5165\u6808\n*/\nvoid GetPostfix(char *expression, char *result){\n Stack stack;\n InitStack(&stack);\n int length = strlen(expression); \n char tmp;\n int index = 0;\n for(int i=0; i<length; i++){\n  if(isOperationNum(expression[i])){\n   result[index++] = expression[i];\n   continue;\n  }\n  if(expression[i] == '('){\n   Push(&stack, expression[i]);\n   continue;\n  }\n  if(expression[i] == ')'){\n   Pop(&stack, &tmp);\n   while(tmp != '('){\n    result[index++] = tmp;\n    Pop(&stack, &tmp);\n   }\n   continue;\n  }\n  if(isOperator(expression[i])){\n   GetTop(&stack, &tmp);\n   while(!StackEmpty(&stack) && compare(tmp, expression[i]) ){\n    Pop(&stack, &tmp);\n    if(tmp == '('){\n     break;\n    }\n    result[index++] = tmp; \n   }\n   Push(&stack, expression[i]);\n  }\n\n }\n while(StackEmpty(&stack) == false){\n  Pop(&stack, &tmp);\n  result[index++] = tmp;\n }\n}\n")),(0,i.kt)("h5",{id:"\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fd0\u7b97"},"\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fd0\u7b97"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int add(char left, char right){\n return (int)(left-'0') + (int)(right-'0');\n}\nint sub(char left, char right){\n return (int)(left) - (int)(right);\n}\nint mul(char left, char right){\n int result = ((int)(left-'0')) * ((int)(right-'0'));\n return result;\n}\nint div(char left, char right){\n return ((int)(left-'0')) / ((int)(right-'0'));\n}\n/*\n\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u8fdb\u884c\u8fd0\u7b97\u5904\u7406\n1.\u9047\u5230\u64cd\u4f5c\u6570  \u5165\u6808\n2.\u9047\u5230\u754c\u9650\u7b26  \u7ecf\u8fc7\u4e2d\u7f00\u8f6c\u540e\u7f00\u7684\u5904\u7406  \u540e\u7f00\u8868\u8fbe\u5f0f\u4e0d\u4f1a\u542b\u6709\u754c\u9650\u7b26\n3.\u9047\u5230\u8fd0\u7b97\u7b26  \u5f39\u51fa\u6808\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u8fdb\u884c\u8fd0\u7b97   \u6ce8\u610f\u540e\u5f39\u51fa\u7684\u90a3\u4e2a\u4f5c\u4e3a\u88ab\u64cd\u4f5c\u6570---\x3e  top2 \u8fd0\u7b97\u7b26 top1\n*/\nint CalculationPostfix(char *expression){\n Stack stack;\n InitStack(&stack);\n int length = strlen(expression);\n char left, right,result;\n for(int i=0; i<length; i++){\n  if(isOperationNum(expression[i])){\n   Push(&stack, expression[i]);\n   continue;\n  }\n  if(isOperator(expression[i])){\n   Pop(&stack, &right);//\u6ce8\u610f\u8fd9\u91cc \u5148\u5f39\u51fa\u7684\u662f\u8fd0\u7b97\u7b26 \u53f3\u8fb9\u7684\u8ba1\u7b97\u6570\n   Pop(&stack, &left);\n   if(expression[i] == '+'){\n    result = add(left, right) + '0';\n   }else if(expression[i] == '-'){\n    result = sub(left, right) + '0';\n   }else if(expression[i] == '*'){\n    result = mul(left, right) + '0';\n   }else{\n    result = div(left, right) + '0';\n   }\n   Push(&stack, result);\n  }\n }\n Pop(&stack, &result);\n return (int)(result-'0');\n}\n")))}u.isMDXComponent=!0}}]);