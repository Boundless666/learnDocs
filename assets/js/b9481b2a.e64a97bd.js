"use strict";(self.webpackChunklearn_docs=self.webpackChunklearn_docs||[]).push([[933],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},d=Object.keys(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,d=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(t),f=i,L=u["".concat(s,".").concat(f)]||u[f]||l[f]||d;return t?r.createElement(L,o(o({ref:n},p),{},{components:t})):r.createElement(L,o({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var d=t.length,o=new Array(d);o[0]=u;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<d;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const d={},o="\u5faa\u73af\u94fe\u8868",a={unversionedId:"list/circularLinkedList",id:"list/circularLinkedList",title:"\u5faa\u73af\u94fe\u8868",description:"",source:"@site/docs/02-list/04-circularLinkedList.md",sourceDirName:"02-list",slug:"/list/circularLinkedList",permalink:"/learnsDocs/docs/list/circularLinkedList",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-list/04-circularLinkedList.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u53cc\u94fe\u8868",permalink:"/learnsDocs/docs/list/duLinkedList"},next:{title:"\u961f\u5217\u548c\u6808",permalink:"/learnsDocs/docs/stackAndQueue/"}},s={},c=[],p={toc:c};function l(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5faa\u73af\u94fe\u8868"},"\u5faa\u73af\u94fe\u8868"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef char ElemType;\n\ntypedef struct LNode{\n ElemType data;\n struct LNode *next;\n}LNode, *LinkedList;\n\nLNode* CreateNode();\nvoid ListInsert(LinkedList head, int order, ElemType e);\nvoid ShowInfo(LinkedList head);\nvoid ListDelete(LinkedList head, int order, ElemType *e);\n\nint main(){\n LinkedList head = CreateNode();\n head->next = head; //\u521b\u5efa\u7684\u65f6\u5019\u9996\u5148\u6307\u5411\u81ea\u5df1  \u4e00\u4e2a\u8282\u70b9\u7684\u5faa\u73af\u94fe\u8868  \u540e\u7eed\u5728\u6dfb\u52a0\u65b0\u8282\u70b9\u7684\u65f6\u5019\u4fdd\u8bc1\u5c3e\u8282\u70b9\u6307\u5411head\n\n ListInsert(head, 1, \'E\');\n ListInsert(head, 1, \'C\');\n ListInsert(head, 1, \'B\');\n ListInsert(head, 3, \'D\');\n ListInsert(head, 1, \'A\');\n ListInsert(head, 6, \'F\');\n ShowInfo(head);\n\n ElemType result;\n ListDelete(head, 1, &result);\n printf("\u5220\u9664\u94fe\u8868\u4e2d\u7b2c %d \u4e2a\u5143\u7d20,\u5143\u7d20\u503c\u4e3a: %c \\n", 1, result);\n ShowInfo(head);\n \n ListDelete(head, 6, &result);\n printf("\u5220\u9664\u94fe\u8868\u4e2d\u7b2c %d \u4e2a\u5143\u7d20,\u5143\u7d20\u503c\u4e3a: %c \\n", 6, result);\n ShowInfo(head);\n}\n\nLNode* CreateNode(){\n LinkedList node = (LinkedList)malloc(sizeof(LNode));\n if(node == NULL){\n  printf("\u5185\u5b58\u7a7a\u95f4\u7533\u8bf7\u5931\u8d25,\u7a0b\u5e8f\u9000\u51fa\\n");\n  exit(0);\n }\n node->next = NULL;\n return node;\n}\n\nvoid ListInsert(LinkedList head, int order, ElemType e){\n LinkedList p = head;\n\n while(p->next!=head && order>1){\n  p = p->next;\n  order--;\n }\n\n if(order != 1){\n  printf("order\u8d8a\u754c\u8bbf\u95ee\\n");\n  return;\n }\n LinkedList node = CreateNode();\n node->data = e;\n node->next = p->next;\n p->next = node;\n}\n\nvoid ShowInfo(LinkedList head){\n LinkedList p = head->next;\n int order = 1;\n while(p!=NULL && p!=head){\n  printf("\u7b2c %d \u4e2a\u8282\u70b9\u7684\u6570\u636e\u4e3a: %c \\n", order++, p->data);\n  p = p->next;\n }\n printf("\\n\\n");\n}\n\nvoid ListDelete(LinkedList head, int order, ElemType *e){\n LinkedList dump, pre;\n dump = pre = head;\n dump = dump->next;\n while(dump->next!=head && order>1){\n  pre = dump;\n  dump = dump->next;\n  order--;\n }\n if(order!=1 || dump==dump->next){\n  printf("order\u8d8a\u754c\u8bbf\u95ee\\n");\n  return;\n }\n *e = dump->data;\n pre->next = dump->next;\n free(dump);\n}\n')))}l.isMDXComponent=!0}}]);